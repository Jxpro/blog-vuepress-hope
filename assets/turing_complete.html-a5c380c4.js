import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as s,c as i,a as e,b as a,d as n,e as h}from"./app-24ed71cb.js";const l={},d=h('<h1 id="区块链下的图灵完备" tabindex="-1"><a class="header-anchor" href="#区块链下的图灵完备" aria-hidden="true">#</a> 区块链下的图灵完备</h1><h2 id="一、什么是图灵完备" tabindex="-1"><a class="header-anchor" href="#一、什么是图灵完备" aria-hidden="true">#</a> 一、什么是图灵完备</h2><ul><li><strong>图灵完备</strong>，图灵完全性通常指具有无限存储能力的通用物理机器或编程语言。图灵完备意味着你的语言可以做到能够用图灵机能做到的所有事情，可以解决所有的可计算问题。 它带来了强大的处理能力，图灵完备的数字货币更加智能。例如以太坊，就是图灵完备的编程语言，这也极大帮助了以太坊智能合约的部署。简单来说，<strong>一切可计算的问题都能计算</strong>，这样的虚拟机或者编程语言就叫图灵完备的。当然，图灵完备也可能因为陷入死循环而导致程序崩溃。因为图灵完备保证的是计算的可行性，但并不保证计算的效率及代码的可理解性、可维护性。</li><li>一个<strong>图灵完备系统</strong>意味着在这个系统中写程序能够找到解决方法(尽管不保证运行时和内存)。在某些场景中图灵完备需要限制语言，有循环执行语句，判断分支语句等。因此，如果有人说，我的新东西是图灵完备的，意思是在原则上(尽管不是经常在实践上)它能够用来解决任何计算性的问题。这里举个例子，比如有人讲，我的东西是图灵完备的，也就是意味着在理论上这个东西能够用来解决任何计算性的问题。</li><li>与图灵完备相反的就是<strong>图灵不完备</strong>，图灵不完备指不允许或限制循环。也就是可以保证每段程序都不会死循环，都有运行完的时候。</li></ul><h2 id="二、图灵完备和图灵不完备各自的优势" tabindex="-1"><a class="header-anchor" href="#二、图灵完备和图灵不完备各自的优势" aria-hidden="true">#</a> 二、图灵完备和图灵不完备各自的优势</h2><p>图灵完备和图灵不完备各有其优势，<strong>图灵不完备更安全，图灵完备更智能</strong>。为什么这么说呢？</p><ul><li>图灵完备的语言，有循环执行语句，判断分支语句等，理论上能<strong>解决任何算法</strong>，但有可能进入死循环而程序崩溃。</li><li>图灵不完备也不是没有意义，有些场景我们需要限制语言本身。如限制循环和递归, 可以保证该语言写的程序<strong>一定终止</strong>。</li></ul><p>循环或递归受限、无法实现数组或更复杂的数据结构等都会影响图灵完备的实现。图灵完备的智能合约有较强的适应性，可以对逻辑较复杂的业务操作进行编程，也就是更加智能，但却有陷入死循环的可能。相较之下，图灵不完备的智能合约虽然不能进行复杂的逻辑操作，但更加简单、高效、和安全。</p><h2 id="三、图灵完备的区块链" tabindex="-1"><a class="header-anchor" href="#三、图灵完备的区块链" aria-hidden="true">#</a> 三、图灵完备的区块链</h2><p><strong>价值可编程</strong>是分布式总账技术的一个重要的本质属性，直接决定平台对业务逻辑的表达能力，具体体现在“智能合约”上面。比特币BTC的内置脚本表达能力是极为有限的，所以比特币的脚本系统是图灵不完备的。瑞波XRP目前不支持智能合约。Bitshares比特股的智能合约在运用上有很多限制，并不能自定义，因此仍然是图灵不完备的。而以太坊和 HyperLedger 支持智能合约且达到“图灵完备”程度。夸张点的话，我们可以归纳为大部分拥有智能合约的Token，系统都是图灵完备的。</p><h2 id="四、比特币是图灵完备的吗" tabindex="-1"><a class="header-anchor" href="#四、比特币是图灵完备的吗" aria-hidden="true">#</a> 四、比特币是图灵完备的吗</h2><p>比特币现在不是图灵完备的，这是大家都知道的事实，但是比特币最初并不是现在这个样子。2010年加文在bitcointalk上讨论比特币的脚本问题，加文当时认为比特币的脚本太过于复杂，复杂代表着不完全。中本聪回复的大概意思就是他希望比特币能够在0.1版本就拥有稳定构架，未来不需要再做底层改变。在过去几年设计比特币的过程中，中本聪发现只有使用脚本系统才能完成他希望支持的担保交易、连带合同、第三方仲裁、多重签名等各种复杂交易类型。</p><p>放在今天，当时的中本聪可能就会这样说：“比特币需要脚本，有了脚本就有智能合约”。为此中本聪在比特币上添加了OP_CAT等数个复杂的<strong>脚本操作码</strong>。</p><p>很多人都在怀疑中本聪最初似乎就准备在比特币实现图灵完备的智能合约。在中本聪离开后，core禁用了OP_CAT等数个脚本，这基本已经让比特币实现图灵完备的可能性彻底破产。</p><p>CSW声称比特币之前设计这些操作码就已经足够实现图灵完备。对于CSW到底是不是中本聪这里就不做讨论了，不过不管他是不是中本聪，CSW毕竟拥有400多个区块链专利，他对于比特币和区块链的理解绝对是秒了论坛喷子几个太阳系，也推荐大家去看一看CSW所写的比特币论文。</p><h2 id="五、比特币现金恢复被禁用脚本操作码" tabindex="-1"><a class="header-anchor" href="#五、比特币现金恢复被禁用脚本操作码" aria-hidden="true">#</a> 五、比特币现金恢复被禁用脚本操作码</h2><p>比特币现金在今年5月15日的硬分叉中，将计划添加<strong>OP_CAT、OP_AND、OP_OR、OP_XOR、OP_DIV、OP_MOD、OP_SPLIT、OP_NUM2BIN和OP_BIN2NUM</strong>等被禁用或新增的操作码，同时也将OP_RETURN数据载体大小增加到220字节。</p><p>这一些都是很有意义的，比特币现金本就计划部署智能合约，这次硬分叉恢复被禁用的操作码进一步让比特币现金成为了最初中本聪愿景的比特币，也具备了更多的延展性，或许未来大家将看到图灵完备的比特币现金，这为比特币现金未来部署智能合约打下了基础。</p><p>如果比特币现金实现了图灵完备，未来的比特币现金将具备更强大的系统处理能力，未来发展更不受限制，拥有更多可能性，用户体验更加完美，中本聪希望完成的各种复杂交易类型或许未来将在比特币现金上实现。</p><h2 id="六、参考文章" tabindex="-1"><a class="header-anchor" href="#六、参考文章" aria-hidden="true">#</a> 六、参考文章</h2>',19),c={href:"https://baijiahao.baidu.com/s?id=1628254498242396681&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"},p={href:"https://blog.csdn.net/LaoYuanPython/article/details/107903886",target:"_blank",rel:"noopener noreferrer"},_={href:"https://zhuanlan.zhihu.com/p/35526610",target:"_blank",rel:"noopener noreferrer"},u=e("p",null,"test for blog-vuepress-hope",-1);function g(f,b){const r=o("ExternalLinkIcon");return s(),i("div",null,[d,e("ul",null,[e("li",null,[e("a",c,[a("图灵完备是什么意思？哪些区块链图灵完备？"),n(r)])]),e("li",null,[e("a",p,[a("区块链学习6：图灵完备和图灵不完备"),n(r)])]),e("li",null,[e("a",_,[a("比特币或许本来就是图灵完备的"),n(r)])])]),u])}const m=t(l,[["render",g],["__file","turing_complete.html.vue"]]);export{m as default};
