import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as s,b as n,d as e,e as t}from"./app-24ed71cb.js";const l={},r=t('<h1 id="智能合约处理" tabindex="-1"><a class="header-anchor" href="#智能合约处理" aria-hidden="true">#</a> 智能合约处理</h1><p>区块链网络的核心是<strong>智能合约</strong>。在<code>PaperNet</code>中，商业票据智能合约中的代码定义了商业票据的有效状态，以及将票据从一种状态状态转变为另一种状态的交易逻辑。在本主题中，我们将向您展示如何实现一个真实世界的智能合约，该合约管理<strong>发行、购买和兑换</strong>商业票据的过程。</p><p>我们将会介绍：</p><ul><li>什么是智能合约以及智能合约为什么重要</li><li>如何定义智能合约</li><li>如何定义交易</li><li>如何实现一笔交易</li><li>如何在智能合约中表示业务对象</li><li>如何在账本中存储和检索对象</li></ul>',4),u={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/install.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/tutorial/commercial_paper.html",target:"_blank",rel:"noopener noreferrer"},k=t('<h2 id="一、智能合约" tabindex="-1"><a class="header-anchor" href="#一、智能合约" aria-hidden="true">#</a> 一、智能合约</h2><p>智能合约定义业务对象的<strong>不同状态</strong>，并管理对象在不同状态之间变化的过程。</p><p>智能合约很重要，因为它们允许<strong>架构师</strong>和智能合约开发人员定义在区块链网络中协作的不同组织之间共享的关键业务流程和数据。</p><p>在<code>PaperNet</code>网络中，智能合约由不同的网络参与者共享，例如 MagnetoCorp 和 DigiBank， 连接到网络的所有应用程序必须使用<strong>相同版本</strong>的智能合约，以便它们共同实现相同的共享业务流程和数据。</p><h2 id="二、实现语言" tabindex="-1"><a class="header-anchor" href="#二、实现语言" aria-hidden="true">#</a> 二、实现语言</h2><p>支持两种运行时，<strong>Java 虚拟机和 Nodejs</strong> 。支持使用 <strong>JavaScript、TypeScript、Java</strong> 或其他可以运行在支持的运行时上其中一种语言。</p><p>在 Java 和 TypeScript 中，标注或者装饰器用来为智能合约和它的结构提供信息。这就更加丰富了开发体验，比如，作者信息或者强调返回类型。</p><p>使用 JavaScript 的话就必须遵守一些规范，同时，对于什么可以自动执行也有一些限制。</p><p><strong>这里仅给出 JavaScript 的示例</strong></p><h2 id="三、合约类" tabindex="-1"><a class="header-anchor" href="#三、合约类" aria-hidden="true">#</a> 三、合约类</h2><p>PaperNet 商业票据智能合约的副本包含在单个文件中：</p>',11),m=s("code",null,"papercontract.js",-1),v={href:"https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp/contract/lib/papercontract.js",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>您可能会从文件路径中注意到这是 MagnetoCorp 的智能合约副本。但是 MagnetoCorp 和 DigiBank 必须统一他们将要使用的智能合约版本，所以，你看哪个组织的合约副本无关紧要，它们都是一样的。</p><hr><p>首先我们看一下智能合约的整体结构：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> Contract<span class="token punctuation">,</span> Context <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fabric-contract-api&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> CommercialPaper <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./paper.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> PaperList <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./paperlist.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> QueryUtils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./queries.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">CommercialPaperContext</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// All papers are held in a list of papers</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>paperList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaperList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">CommercialPaperContract</span> <span class="token keyword">extends</span> <span class="token class-name">Contract</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Unique namespace when multiple contracts per chaincode file</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&#39;org.papernet.commercialpaper&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
    <span class="token keyword">async</span> <span class="token function">issue</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
    <span class="token keyword">async</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> <span class="token operator">...</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> CommercialPaperContract<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),h={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super",target:"_blank",rel:"noopener noreferrer"},g={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/namespace.html",target:"_blank",rel:"noopener noreferrer"},y=s("p",null,[s("code",null,"org.papernet.commercialpaper"),n("非常具有描述性，它是这份智能合约是所有 PaperNet 组织关于商业票据商定的定义。")],-1),f=s("code",null,"CommercialPaperContract",-1),w=s("strong",null,"发行",-1),_=s("strong",null,"购买",-1),x=s("strong",null,"兑换",-1),j={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#transaction-definition",target:"_blank",rel:"noopener noreferrer"},S=s("code",null,"CommericalPaperContract",-1),C=s("code",null,"Hyperledger Fabric",-1),P=s("code",null,"Contract",-1),N={href:"https://hyperledger.github.io/fabric-chaincode-node/master/api/fabric-contract-api.Contract.html",target:"_blank",rel:"noopener noreferrer"},D=t(`<p>通常每个文件只有一个智能合约（合约往往有不同的生命周期，这使得将它们分开是明智的）。但是，在某些情况下，多个智能合约可能会为应用程序提供语法帮助，例如<code>EuroBond</code>、<code>DollarBond</code>、<code>YenBond</code>但基本上提供相同的功能。在这种情况下，智能合约和交易可以消除歧义。</p><h2 id="四、交易定义" tabindex="-1"><a class="header-anchor" href="#四、交易定义" aria-hidden="true">#</a> 四、交易定义</h2><p>在类中找到<code>issue</code>方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">issue</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> issueDateTime<span class="token punctuation">,</span> maturityDateTime<span class="token punctuation">,</span> faceValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>无论何时调用此合约来<strong>发行</strong>商业票据，只要应用程序请求发行商业票据，合约就会自动调用<code>issue</code>方法。交易属性值通过相应的变量提供给方法。</p><p>回想一下如何使用以下交易创建商业票据<code>00001</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Txn <span class="token operator">=</span> issue
Issuer <span class="token operator">=</span> MagnetoCorp
Paper <span class="token operator">=</span> 00001
Issue <span class="token function">time</span> <span class="token operator">=</span> <span class="token number">31</span> May <span class="token number">2020</span> 09:00:00 EST
Maturity <span class="token function">date</span> <span class="token operator">=</span> <span class="token number">30</span> November <span class="token number">2020</span>
Face value <span class="token operator">=</span> 5M USD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体调用方法见<code>commercial-paper\\organization\\magnetocorp\\application\\issue.js</code></p><p>关键调用语句如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> issueResponse <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">submitTransaction</span><span class="token punctuation">(</span><span class="token string">&#39;issue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MagnetoCorp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;00001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2020-05-31&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2020-11-30&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5000000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10),M=s("code",null,"issue",-1),E=s("code",null,"ctx",-1),I={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/transactioncontext.html",target:"_blank",rel:"noopener noreferrer"},T=s("strong",null,"交易上下文",-1),O={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#%E4%BA%A4%E6%98%93%E9%80%BB%E8%BE%91",target:"_blank",rel:"noopener noreferrer"},L=t(`<p>可实现自己的<code>createContext()</code>方法而不是用默认实现，来了解智能合约如何扩展默认交易上下文：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommercialPaperContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此扩展上下文将自定义属性<code>paperList</code>添加到默认值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">CommercialPaperContext</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// All papers are held in a list of papers</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>paperList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PaperList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们很快就会看到 <code>ctx.paperList</code> 如何随后用于帮助存储和检索所有 PaperNet 商业票据。</p><hr><p>为了巩固对智能合约交易结构的理解，找到<strong>购买</strong>和<strong>兑换</strong>交易定义，理解它们如何映射到相应的交易</p><p><strong>购买</strong>交易：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Txn <span class="token operator">=</span> buy
Issuer <span class="token operator">=</span> MagnetoCorp
Paper <span class="token operator">=</span> 00001
Current owner <span class="token operator">=</span> MagnetoCorp
New owner <span class="token operator">=</span> DigiBank
Purchase <span class="token function">time</span> <span class="token operator">=</span> <span class="token number">31</span> May <span class="token number">2020</span> <span class="token number">10</span>:00:00 EST
Price <span class="token operator">=</span> <span class="token number">4</span>.94M USD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> currentOwner<span class="token punctuation">,</span> newOwner<span class="token punctuation">,</span> price<span class="token punctuation">,</span> purchaseTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>兑换</strong>交易：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Txn <span class="token operator">=</span> redeem
Issuer <span class="token operator">=</span> MagnetoCorp
Paper <span class="token operator">=</span> 00001
Redeemer <span class="token operator">=</span> DigiBank
Redeem <span class="token function">time</span> <span class="token operator">=</span> <span class="token number">31</span> Dec <span class="token number">2020</span> <span class="token number">12</span>:00:00 EST
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">redeem</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> redeemingOwner<span class="token punctuation">,</span> redeemDateTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><p>在两个案例中，注意商业票据交易和智能合约方法调用之间 <strong>1：1</strong> 的关系。</p>`,15),z=s("code",null,"async",-1),K=s("code",null,"await",-1),B={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",target:"_blank",rel:"noopener noreferrer"},A=t(`<h2 id="五、交易逻辑" tabindex="-1"><a class="header-anchor" href="#五、交易逻辑" aria-hidden="true">#</a> 五、交易逻辑</h2><p>现在您已经了解了合约的结构和交易的定义，下面让我们关注智能合约中的逻辑。</p><p>回想一下第一个<strong>发行</strong>交易：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Txn <span class="token operator">=</span> issue
Issuer <span class="token operator">=</span> MagnetoCorp
Paper <span class="token operator">=</span> 00001
Issue <span class="token function">time</span> <span class="token operator">=</span> <span class="token number">31</span> May <span class="token number">2020</span> 09:00:00 EST
Maturity <span class="token function">date</span> <span class="token operator">=</span> <span class="token number">30</span> November <span class="token number">2020</span>
Face value <span class="token operator">=</span> 5M USD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它导致<code>issue</code>方法被传递调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">issue</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> issueDateTime<span class="token punctuation">,</span> maturityDateTime<span class="token punctuation">,</span> faceValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// create an instance of the paper</span>
        <span class="token keyword">let</span> paper <span class="token operator">=</span> CommercialPaper<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span>issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> issueDateTime<span class="token punctuation">,</span> maturityDateTime<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>faceValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Smart contract, rather than paper, moves paper into ISSUED state</span>
        paper<span class="token punctuation">.</span><span class="token function">setIssued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// save the owner&#39;s MSP</span>
        <span class="token keyword">let</span> mspid <span class="token operator">=</span> ctx<span class="token punctuation">.</span>clientIdentity<span class="token punctuation">.</span><span class="token function">getMSPID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        paper<span class="token punctuation">.</span><span class="token function">setOwnerMSP</span><span class="token punctuation">(</span>mspid<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Newly issued paper is owned by the issuer to begin with (recorded for reporting purposes)</span>
        paper<span class="token punctuation">.</span><span class="token function">setOwner</span><span class="token punctuation">(</span>issuer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Add the paper to the list of all similar commercial papers in the ledger world state</span>
        <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>paperList<span class="token punctuation">.</span><span class="token function">addPaper</span><span class="token punctuation">(</span>paper<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Must return a serialized paper to caller of smart contract</span>
        <span class="token keyword">return</span> paper<span class="token punctuation">;</span>
    	<span class="token comment">// return paper.toBuffer();</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逻辑很简单：获取交易输入变量，创建新的商业票据<code>paper</code>，使用<code>paperList</code>将其添加到所有商业票据的列表中，并将新的商业票据**（序列化为buffer）**作为交易响应返回。</p><p>了解如何从交易上下文中检索<code>paperList</code>以提供对商业票据列表的访问。</p><p><code>issue()</code>、<code>buy()</code>和<code>redeem()</code>不断重新访问<code>ctx.paperList</code>以使商业票据列表保持最新。</p><hr><p><strong>购买</strong>交易逻辑的详细描述：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> currentOwner<span class="token punctuation">,</span> newOwner<span class="token punctuation">,</span> price<span class="token punctuation">,</span> purchaseDateTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// Retrieve the current paper using key fields provided</span>
        <span class="token keyword">let</span> paperKey <span class="token operator">=</span> CommercialPaper<span class="token punctuation">.</span><span class="token function">makeKey</span><span class="token punctuation">(</span><span class="token punctuation">[</span>issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> paper <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>paperList<span class="token punctuation">.</span><span class="token function">getPaper</span><span class="token punctuation">(</span>paperKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Validate current owner</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>paper<span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> currentOwner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;\\nPaper &#39;</span> <span class="token operator">+</span> issuer <span class="token operator">+</span> paperNumber <span class="token operator">+</span> <span class="token string">&#39; is not owned by &#39;</span> <span class="token operator">+</span> currentOwner<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// First buy moves state from ISSUED to TRADING (when running )</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>paper<span class="token punctuation">.</span><span class="token function">isIssued</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            paper<span class="token punctuation">.</span><span class="token function">setTrading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Check paper is not already REDEEMED</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>paper<span class="token punctuation">.</span><span class="token function">isTrading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            paper<span class="token punctuation">.</span><span class="token function">setOwner</span><span class="token punctuation">(</span>newOwner<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// save the owner&#39;s MSP</span>
            <span class="token keyword">let</span> mspid <span class="token operator">=</span> ctx<span class="token punctuation">.</span>clientIdentity<span class="token punctuation">.</span><span class="token function">getMSPID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            paper<span class="token punctuation">.</span><span class="token function">setOwnerMSP</span><span class="token punctuation">(</span>mspid<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;\\nPaper &#39;</span> <span class="token operator">+</span> issuer <span class="token operator">+</span> paperNumber <span class="token operator">+</span> <span class="token string">&#39; is not trading. Current state = &#39;</span> <span class="token operator">+</span> paper<span class="token punctuation">.</span><span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Update the paper</span>
        <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>paperList<span class="token punctuation">.</span><span class="token function">updatePaper</span><span class="token punctuation">(</span>paper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> paper<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用<code>paper.setOwner(newOwner)</code>更改拥有者之前，理解交易如何检查<code>currentOwner</code>并检查该<code>paper</code>应该是<code>TRADING</code>状态的。</p><p>基本流程很简单：检查一些前提条件，设置新拥有者，更新账本上的商业票据，并将更新的商业票据**（序列化为 buffer ）**作为交易响应返回。</p><hr><p>自行理解一下<strong>兑换</strong>交易的逻辑：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">redeem</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> redeemingOwner<span class="token punctuation">,</span> issuingOwnerMSP<span class="token punctuation">,</span> redeemDateTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">let</span> paperKey <span class="token operator">=</span> CommercialPaper<span class="token punctuation">.</span><span class="token function">makeKey</span><span class="token punctuation">(</span><span class="token punctuation">[</span>issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> paper <span class="token operator">=</span> <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>paperList<span class="token punctuation">.</span><span class="token function">getPaper</span><span class="token punctuation">(</span>paperKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Check paper is not alread in a state of REDEEMED</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>paper<span class="token punctuation">.</span><span class="token function">isRedeemed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;\\nPaper &#39;</span> <span class="token operator">+</span> issuer <span class="token operator">+</span> paperNumber <span class="token operator">+</span> <span class="token string">&#39; has already been redeemed&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Validate current redeemer&#39;s MSP matches the invoking redeemer&#39;s MSP id - can only redeem if you are the owning org.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>paper<span class="token punctuation">.</span><span class="token function">getOwnerMSP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> ctx<span class="token punctuation">.</span>clientIdentity<span class="token punctuation">.</span><span class="token function">getMSPID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;\\nPaper &#39;</span> <span class="token operator">+</span> issuer <span class="token operator">+</span> paperNumber <span class="token operator">+</span> <span class="token string">&#39; cannot be redeemed by &#39;</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span>clientIdentity<span class="token punctuation">.</span><span class="token function">getMSPID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;, as it is not the authorised owning Organisation&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// As this is just a sample, can show additional verification check: that the redeemer provided matches that on record, before redeeming it</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>paper<span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> redeemingOwner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            paper<span class="token punctuation">.</span><span class="token function">setOwner</span><span class="token punctuation">(</span>paper<span class="token punctuation">.</span><span class="token function">getIssuer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            paper<span class="token punctuation">.</span><span class="token function">setOwnerMSP</span><span class="token punctuation">(</span>issuingOwnerMSP<span class="token punctuation">)</span><span class="token punctuation">;</span>
            paper<span class="token punctuation">.</span><span class="token function">setRedeemed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            paper<span class="token punctuation">.</span>redeemDateTime <span class="token operator">=</span> redeemDateTime<span class="token punctuation">;</span> <span class="token comment">// record redemption date against the asset (the complement to &#39;issue date&#39;)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;\\nRedeeming owner: &#39;</span> <span class="token operator">+</span> redeemingOwner <span class="token operator">+</span> <span class="token string">&#39; organisation does not currently own paper: &#39;</span> <span class="token operator">+</span> issuer <span class="token operator">+</span> paperNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">await</span> ctx<span class="token punctuation">.</span>paperList<span class="token punctuation">.</span><span class="token function">updatePaper</span><span class="token punctuation">(</span>paper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> paper<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、对象表示" tabindex="-1"><a class="header-anchor" href="#六、对象表示" aria-hidden="true">#</a> 六、对象表示</h2><p>我们已经了解了如何使用<code>CommercialPaper</code>和<code>PaperList</code>类定义和实现<strong>发行</strong>、<strong>购买</strong>和<strong>兑换</strong>交易。让我们通过查看这些类如何工作来结束这个主题。</p><p>定位到<code>CommercialPaper</code>类，该类包含商业票据状态的内存表示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">CommercialPaper</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>了解<code>createInstance</code>方法如何使用提供的参数初始化一个新的商业票据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">static</span> <span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token parameter">issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> issueDateTime<span class="token punctuation">,</span> maturityDateTime<span class="token punctuation">,</span> faceValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommercialPaper</span><span class="token punctuation">(</span><span class="token punctuation">{</span> issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> issueDateTime<span class="token punctuation">,</span> maturityDateTime<span class="token punctuation">,</span> faceValue <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回想一下<strong>发行</strong>交易如何使用这个类：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> paper <span class="token operator">=</span> CommercialPaper<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span>issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> issueDateTime<span class="token punctuation">,</span> maturityDateTime<span class="token punctuation">,</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>faceValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看每次调用<strong>发行</strong>交易时，如何创建包含交易数据的商业票据的新内存实例。</p><p>需要注意的几个要点：</p>`,27),R={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/smartcontract.html#%E8%AE%BF%E9%97%AE%E8%B4%A6%E6%9C%AC",target:"_blank",rel:"noopener noreferrer"},J=s("code",null,"CommercialPaper",-1),V=s("code",null,"State",-1),U=s("code",null,"State",-1),F=s("code",null,"State",-1),q=s("code",null,"state.js",-1),G={href:"https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp/contract/ledger-api/state.js",target:"_blank",rel:"noopener noreferrer"},H=s("code",null,"State",-1),W=t(`<li>票据在创建时会计算自己的密钥，在访问帐本时将使用此密钥。密钥由<code>issuer</code>和<code>paperNumber</code>的组合形成。<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">super</span><span class="token punctuation">(</span>CommercialPaper<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>obj<span class="token punctuation">.</span>issuer<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>paperNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>票据通过交易而不是票据类变更到<code>ISSUED</code>状态，那是因为智能合约控制票据的状态生命周期。 例如，<code>import</code>交易可能会立即创建一组新的<code>TRADING</code>状态的票据。</li>`,2),Q=t(`<p><code>CommercialPaper</code>类的其余部分包含简单的辅助方法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>owner<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>回想一下智能合约如何使用这样的方法来维护商业票据的整个生命周期。 例如，在<strong>兑换</strong>交易中，我们看到：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>paper<span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> redeemingOwner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  paper<span class="token punctuation">.</span><span class="token function">setOwner</span><span class="token punctuation">(</span>paper<span class="token punctuation">.</span><span class="token function">getIssuer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  paper<span class="token punctuation">.</span><span class="token function">setRedeemed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、访问账本" tabindex="-1"><a class="header-anchor" href="#七、访问账本" aria-hidden="true">#</a> 七、访问账本</h2>`,5),Y=s("code",null,"paperlist.js",-1),X={href:"https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp/contract/lib/paperlist.js",target:"_blank",rel:"noopener noreferrer"},Z=s("code",null,"PaperList",-1),$=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">PaperList</span> <span class="token keyword">extends</span> <span class="token class-name">StateList</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),nn=s("code",null,"Hyperledger Fabric",-1),sn=s("code",null,"PaperList",-1),an={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/architecture.html",target:"_blank",rel:"noopener noreferrer"},en=t(`<p>与<code>CommercialPaper</code>类一样，此类扩展了应用程序定义的<code>StateList</code>类，该类为一系列状态创建了一个通用抽象，在本例中是 PaperNet 中的所有商业票据。</p><p><code>addPaper()</code>方法是对<code>StateList.addState()</code>方法的简单封装：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">addPaper</span><span class="token punctuation">(</span><span class="token parameter">paper</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addState</span><span class="token punctuation">(</span>paper<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),tn=s("code",null,"StateList.js",-1),pn={href:"https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp/contract/ledger-api/statelist.js",target:"_blank",rel:"noopener noreferrer"},on=s("code",null,"StateList",-1),cn=s("code",null,"putState()",-1),ln=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">addState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>stub<span class="token punctuation">.</span><span class="token function">createCompositeKey</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> state<span class="token punctuation">.</span><span class="token function">getSplitKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> State<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>stub<span class="token punctuation">.</span><span class="token function">putState</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>帐本中的每个状态数据都需要以下两个基本要素：</p><ul><li><strong>键（Key）</strong>: 键由<code>createCompositeKey()</code>使用固定名称和<code>state</code>密钥形成。在构造<code>PaperList</code>对象时分配了名称，<code>state.getSplitKey()</code>确定每个状态的唯一键。</li><li><strong>数据（Data）</strong>: 数据只是商业票据状态的<strong>序列化形式</strong>，使用<code>State.serialize()</code>方法创建<code>State</code>类使用<code>JSON</code>对数据进行<strong>序列化和反序列化</strong>，并根据需要使用<code>State</code>的业务对象类，在我们的例子中为<code>CommercialPaper</code>，在构造<code>PaperList</code>对象时再次设置。</li></ul>`,3),rn=s("strong",null,"注意",-1),un=s("code",null,"StateList",-1),dn={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/readwrite.html",target:"_blank",rel:"noopener noreferrer"},kn=t(`<p><code>StateList</code> <code>getState()</code> 和 <code>updateState()</code> 方法以类似的方式工作：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> ledgerKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>stub<span class="token punctuation">.</span><span class="token function">createCompositeKey</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> State<span class="token punctuation">.</span><span class="token function">splitKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>stub<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span>ledgerKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> state <span class="token operator">=</span> State<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>supportedClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> state<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token function">updateState</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>stub<span class="token punctuation">.</span><span class="token function">createCompositeKey</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> state<span class="token punctuation">.</span><span class="token function">getSplitKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> data <span class="token operator">=</span> State<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span>stub<span class="token punctuation">.</span><span class="token function">putState</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),mn=s("code",null,"putState()",-1),vn=s("code",null,"getState()",-1),bn=s("code",null,"createCompositeKey()",-1),hn={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/application.html",target:"_blank",rel:"noopener noreferrer"};function gn(yn,fn){const a=o("ExternalLinkIcon");return c(),i("div",null,[r,s("p",null,[n("如果您愿意，可以"),s("a",u,[n("下载示例"),e(a)]),n("，甚至可以"),s("a",d,[n("在本地运行"),e(a)]),n("。它是用 JavaScript 和 Java 编写的，但逻辑与语言无关，因此您可以轻松地查看正在发生的事情！")]),k,s("ul",null,[s("li",null,[m,n(" - "),s("a",v,[n("GitHub在线阅读"),e(a)])])]),b,s("blockquote",null,[s("p",null,[n("注意 JavaScript 类构造函数如何使用其"),s("a",h,[n("超类"),e(a)]),n("通过一个"),s("a",g,[n("命名空间"),e(a)]),n("来初始化自身")]),y]),s("p",null,[f,n("类中包含商业票据中交易的定义——"),w,n("，"),_,n("和"),x,n("。这些交易带给了商业票据创建和在它们的生命周期中流动的能力。我们马上会查看这些"),s("a",j,[n("交易"),e(a)]),n("，但是现在我们需要关注一下"),S,n("扩展的"),C,n(),P,s("a",N,[n("类"),e(a)]),n("。")]),D,s("p",null,[n("注意"),M,n("方法中定义了一个额外变量"),E,n("。它被称为"),s("a",I,[T,e(a)]),n("（context），它始终是第一个参数。默认情况下，它维护与"),s("a",O,[n("交易逻辑"),e(a)]),n("相关的每个合约和每个交易的信息。例如，它将包含 MagnetoCorp 指定的交易标识符，MagnetoCorp 可以发行用户的数字证书，也可以调用账本 API。")]),L,s("p",null,[n("所有 JavaScript 方法都使用 "),z,n(" 和 "),K,n(),s("a",B,[n("关键字"),e(a)]),n("。")]),A,s("ul",null,[s("li",null,[n("这是一个内存中的表示；我们"),s("a",R,[n("稍后"),e(a)]),n("会看到它如何在帐本上显示。")]),s("li",null,[J,n("类扩展了"),V,n("类。"),U,n("是一个应用程序定义的类，它为状态创建一个公共抽象。所有状态都有一个它们代表的业务对象类、一个复合键，可以被序列化和反序列化，等等。当我们在帐本上存储多个业务对象类型时，"),F,n("可以帮助我们的代码更清晰。 检查"),q,s("a",G,[n("文件"),e(a)]),n("中的"),H,n("类。")]),W]),Q,s("p",null,[n("现在在"),Y,s("a",X,[n("文件"),e(a)]),n("中找到"),Z,n("类：")]),$,s("p",null,[n("此工具类用于管理"),nn,n("状态数据库中的所有 PaperNet 商业票据。"),sn,n("数据结构在"),s("a",an,[n("架构主题"),e(a)]),n("中有更详细的描述。")]),en,s("p",null,[n("您可以在"),tn,s("a",pn,[n("文件"),e(a)]),n("中看到"),on,n("类如何使用 Fabric API "),cn,n("将商业票据作为状态数据写在帐本中：")]),ln,s("p",null,[rn,n("，"),un,n("不存储有关单个状态或状态总列表的任何内容，它将所有这些状态委托给 Fabric 状态数据库。这是一个重要的设计模式，它减少了 Hyperledger Fabric 中"),s("a",dn,[n("账本 MVCC 冲突"),e(a)]),n("的机会。")]),kn,s("p",null,[n("了解他们如何使用 Fabric APIs "),mn,n("、 "),vn,n(" 和 "),bn,n(" 来存取账本。我们稍后将"),s("a",hn,[n("扩展这份智能合约"),e(a)]),n("，以列出 paperNet 中的所有商业票据。实现账本检索的方法可能是什么样的。")])])}const xn=p(l,[["render",gn],["__file","5.analysis_paper_1.html.vue"]]);export{xn as default};
