import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r,o,c as i,a as n,b as s,d,e as a}from"./app-24ed71cb.js";const l={},c=a(`<h1 id="docker的基本使用" tabindex="-1"><a class="header-anchor" href="#docker的基本使用" aria-hidden="true">#</a> Docker的基本使用</h1><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>docker search xxx</td><td><strong>搜索</strong>镜像</td></tr><tr><td>docker pull xxx</td><td><strong>下载</strong>镜像</td></tr><tr><td>docker start 容器id</td><td><strong>启动</strong>容器</td></tr><tr><td>docker restart 容器id</td><td><strong>重启</strong>容器</td></tr><tr><td>docker stop 容器id</td><td><strong>停止</strong>当前正在运行的容器</td></tr><tr><td>docker kill 容器id</td><td><strong>强制停止</strong>当前运行的容器</td></tr><tr><td>docker run -d --name tomcat01 tomcat</td><td>新建容器并以后台运行，并<strong>命名</strong></td></tr><tr><td>docker run -d -p 主机端口:容器内端口 tomcat</td><td>新建容器并以后台运行，并<strong>映射端口</strong></td></tr><tr><td>docker run -d -v 主机目录:容器内目录 tomcat</td><td>新建容器并以后台运行，并<strong>挂载目录</strong></td></tr><tr><td>docker run -it tomcat /bin/bash</td><td>以<strong>交互模式新建</strong>容器并使用bash作为伪终端</td></tr><tr><td><s>docker run -it -d tomcat /bin/bash</s></td><td><s>以交互模式新建容器并 exit 退出后<strong>保持运行</strong></s></td></tr><tr><td>docker exec -it 容器ID/名称 /bin/bash</td><td>以交互模式<strong>进入</strong>容器并使用bash作为伪终端</td></tr><tr><td>docker run -it --rm tomcat /bin/bash</td><td>交互模式<strong>临时</strong>新建容器</td></tr><tr><td>docker rm -f (docker ps -aq)</td><td><strong>删除容器</strong></td></tr><tr><td>docker rmi -f (docker images -aq)</td><td><strong>删除镜像</strong></td></tr><tr><td>docker inspect 容器ID/名称</td><td>查看容器的<strong>元数据</strong></td></tr><tr><td>docker port 容器ID/名称</td><td>查看容器的<strong>映射端口</strong></td></tr><tr><td>exit</td><td>退出并关闭容器 <s>( -d 可以保持运行 )</s></td></tr><tr><td>ctrl +P +Q</td><td>退出但不关闭容器</td></tr></tbody></table><h2 id="run-命令" tabindex="-1"><a class="header-anchor" href="#run-命令" aria-hidden="true">#</a> run 命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

<span class="token comment"># 示例一</span>
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">--name</span> tomcat01 tomcat
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> tomcat01 /bin/bash
<span class="token builtin class-name">exit</span>
<span class="token function">docker</span> stop aa664b0c8ed9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OPTIONS说明：</p>`,6),p=a("<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong>--name &quot;xxx&quot;:</strong> 为容器指定一个名称；</li><li><strong>--dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li>",8),m={href:"http://example.com",target:"_blank",rel:"noopener noreferrer"},u=a("<li><strong>-h :</strong> 指定容器的hostname；</li><li><strong>-e username &quot;ritchie&quot;:</strong> 设置环境变量；</li><li><strong>--env-file:</strong> 从指定文件读入环境变量；</li><li>**-m 😗*设置容器使用内存最大值；</li><li><strong>--net:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li><li><strong>--link:</strong> 添加链接到另一个容器；</li><li><strong>--expose:</strong> 开放一个端口或一组端口；</li><li><strong>--volume , -v:</strong> 绑定一个卷</li>",8),k=a(`<h2 id="ps-format" tabindex="-1"><a class="header-anchor" href="#ps-format" aria-hidden="true">#</a> ps --format</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Valid placeholders:
.ID - Container ID.
.Image - Image ID.
.Command - Quoted command.
.CreatedAt - Time when the container was created.
.RunningFor - Elapsed <span class="token function">time</span> since the container was started.
.Ports - Exposed ports.
.Status - Container status.
.Size - Container disk size.
.Names - Container names.
.Labels - All labels assigned to the container.
.Label - Value of a specific label <span class="token keyword">for</span> this container.
.Mounts - Names of the volumes mounted <span class="token keyword">in</span> this container.

<span class="token comment"># example</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">--format</span> <span class="token string">&quot;table {{.ID}}<span class="token entity" title="\\t">\\t</span>{{.Command}}<span class="token entity" title="\\t">\\t</span>{{.Names}}<span class="token entity" title="\\t">\\t</span>{{.Status}}&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rm-rmi" tabindex="-1"><a class="header-anchor" href="#rm-rmi" aria-hidden="true">#</a> rm &amp; rmi</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>
<span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>

<span class="token function">docker</span> <span class="token function">rm</span> 容器id   				<span class="token comment">#删除指定的容器，强制删除: rm -rf</span>
<span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>  	 <span class="token comment">#删除所有的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> -aq<span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">docker</span> <span class="token function">rm</span>  <span class="token comment">#删除所有的容器</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function v(b,g){const t=r("ExternalLinkIcon");return o(),i("div",null,[c,n("ul",null,[p,n("li",null,[n("strong",null,[s("--dns-search "),n("a",m,[s("example.com"),d(t)]),s(":")]),s(" 指定容器DNS搜索域名，默认和宿主一致；")]),u]),k])}const x=e(l,[["render",v],["__file","command.html.vue"]]);export{x as default};
