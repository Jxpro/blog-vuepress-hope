import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as r,a as s,b as n,d as e,e as t}from"./app-5e6e2e94.js";const l={},i=t('<h1 id="处理应用" tabindex="-1"><a class="header-anchor" href="#处理应用" aria-hidden="true">#</a> 处理应用</h1><p>应用程序可以通过将交易提交到帐本或查询帐本内容来与区块链网络进行交互。本主题介绍了应用程序如何执行此操作的机制；在我们的场景中，组织使用应用程序访问 PaperNet ，这些应用程序调用定义在商业票据智能合约中的<strong>发行</strong>、<strong>购买</strong>和<strong>兑换</strong>交易。尽管 MagnetoCorp 的应用发行商业票据是基础功能，但它涵盖了所有主要的理解点。</p><p>在本主题中，我们将介绍：</p><ul><li>从应用程序到调用智能合约</li><li>应用程序如何使用钱包和身份</li><li>应用程序如何使用网关连接</li><li>如何访问特定网络</li><li>如何构造交易请求</li><li>如何提交交易</li><li>如何处理交易响应</li></ul>',4),d={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/install.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/tutorial/commercial_paper.html",target:"_blank",rel:"noopener noreferrer"},k=t('<h2 id="一、基本流程" tabindex="-1"><a class="header-anchor" href="#一、基本流程" aria-hidden="true">#</a> 一、基本流程</h2><p>应用程序使用<code>Fabric SDK</code>与区块链网络交互。</p><p>以下是应用程序如何<strong>调用商业票据智能合约</strong>的简化图表：</p><figure><img src="https://raw.githubusercontent.com/Jxpro/PicBed/master/md/2021/11/2021-11-20-222828.png" alt="develop.application" tabindex="0" loading="lazy"><figcaption>develop.application</figcaption></figure><blockquote><p>PaperNet 应用程序调用商业票据智能合约来提交发行交易请求。</p></blockquote><p>应用程序必须遵循<strong>六个基本步骤</strong>来提交交易：</p><ul><li>从钱包中选择一个身份</li><li>连接到网关</li><li>访问所需的网络</li><li>构建智能合约的交易请求</li><li>将交易提交到网络</li><li>处理响应</li></ul>',7),g=s("code",null,"Fabric SDK",-1),v=s("code",null,"issue.js",-1),m={href:"https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp/application/issue.js",target:"_blank",rel:"noopener noreferrer"},h=t(`<h2 id="二、钱包" tabindex="-1"><a class="header-anchor" href="#二、钱包" aria-hidden="true">#</a> 二、钱包</h2><p>在<code>issue.js</code>的顶部，您将看到两个<code>Fabric</code>类导入代码：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const { Wallets, Gateway } = require(&#39;fabric-network&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),b={href:"https://hyperledger.github.io/fabric-sdk-node/master/module-fabric-network.html",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"fabric-network",-1),y=s("strong",null,"Wallet",-1),f=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">await</span> Wallets<span class="token punctuation">.</span><span class="token function">newFileSystemWallet</span><span class="token punctuation">(</span><span class="token string">&#39;../identity/user/isabella/wallet&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),w=s("code",null,"wallet",-1),j={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/wallet.html",target:"_blank",rel:"noopener noreferrer"},P=s("code",null,"issue",-1),N=s("strong",null,"X.509 数字证书",-1),x=s("strong",null,"身份凭证",-1),C={href:"http://xxx.id",target:"_blank",rel:"noopener noreferrer"},S={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/wallet.html",target:"_blank",rel:"noopener noreferrer"},O=s("strong",null,"数字等价物",-1),D=s("strong",null,"X.509 数字证书",-1),T={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/transactioncontext.html",target:"_blank",rel:"noopener noreferrer"},B=s("p",null,[n("另请注意，钱包不持有任何形式的现金或代币，它们"),s("strong",null,"持有身份"),n("。")],-1),M=s("h2",{id:"三、网关",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#三、网关","aria-hidden":"true"},"#"),n(" 三、网关")],-1),z=s("strong",null,"Gateway",-1),E={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/gateway.html",target:"_blank",rel:"noopener noreferrer"},F=s("code",null,"Peer",-1),K=s("code",null,"issue.js",-1),A=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">await</span> gateway<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>connectionProfile<span class="token punctuation">,</span> connectionOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>gateway.connect()</code> 有两个重要参数：</p>`,2),I=s("strong",null,"connectionProfile",-1),L={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/connectionprofile.html",target:"_blank",rel:"noopener noreferrer"},R=s("code",null,"Peer",-1),V=s("strong",null,"connectionOptions",-1),W={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/connectionoptions.html",target:"_blank",rel:"noopener noreferrer"},X=s("code",null,"issue.js",-1),q=s("p",null,[n("了解客户端应用程序如何使用网关将自身与可能发生变化的"),s("strong",null,"网络拓扑"),n("隔离开来。")],-1),J=s("p",null,[n("网关负责使用"),s("strong",null,"连接配置文件"),n("和"),s("strong",null,"连接选项"),n("将交易提案发送到网络中的正确"),s("code",null,"Peer"),n("节点。")],-1),Y=s("hr",null,null,-1),$={href:"https://github.com/hyperledger/fabric-samples/blob/master/commercial-paper/organization/magnetocorp/gateway/networkConnection.yaml",target:"_blank",rel:"noopener noreferrer"},G=s("code",null,"./gateway/connectionProfile.yaml",-1),H={href:"http://yaml.org/spec/1.2/spec.html#Preview",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>它被加载并转换为<code>JSON</code>对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> connectionProfile <span class="token operator">=</span> yaml<span class="token punctuation">.</span><span class="token function">safeLoad</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./gateway/connectionProfile.yaml&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，我们关注<code>channels:</code>和<code>peers:</code>部分:（我们稍微修改了细节，以便更好地解释发生了什么）</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">channels</span><span class="token punctuation">:</span>
  <span class="token key atrule">papernet</span><span class="token punctuation">:</span>
    <span class="token key atrule">peers</span><span class="token punctuation">:</span>
      <span class="token key atrule">peer1.magnetocorp.com</span><span class="token punctuation">:</span>
        <span class="token key atrule">endorsingPeer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">eventSource</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

      <span class="token key atrule">peer2.digibank.com</span><span class="token punctuation">:</span>
        <span class="token key atrule">endorsingPeer</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
        <span class="token key atrule">eventSource</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token key atrule">peers</span><span class="token punctuation">:</span>
  <span class="token key atrule">peer1.magnetocorp.com</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> grpcs<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">7051</span>
    <span class="token key atrule">grpcOptions</span><span class="token punctuation">:</span>
      <span class="token key atrule">ssl-target-name-override</span><span class="token punctuation">:</span> peer1.magnetocorp.com
      <span class="token key atrule">request-timeout</span><span class="token punctuation">:</span> <span class="token number">120</span>
    <span class="token key atrule">tlsCACerts</span><span class="token punctuation">:</span>
      <span class="token key atrule">path</span><span class="token punctuation">:</span> certificates/magnetocorp/magnetocorp.com<span class="token punctuation">-</span>cert.pem

  <span class="token key atrule">peer2.digibank.com</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> grpcs<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8051</span>
    <span class="token key atrule">grpcOptions</span><span class="token punctuation">:</span>
      <span class="token key atrule">ssl-target-name-override</span><span class="token punctuation">:</span> peer1.digibank.com
    <span class="token key atrule">tlsCACerts</span><span class="token punctuation">:</span>
      <span class="token key atrule">path</span><span class="token punctuation">:</span> certificates/digibank/digibank.com<span class="token punctuation">-</span>cert.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看一下<code>channel:</code>如何识别<code>PaperNet:</code>网络通道及其两个<code>Peer</code>节点。</p><p>MagnetoCorp 拥有<code>peer1.magenetocorp.com</code>，DigiBank 拥有<code>peer2.digibank.com</code>，两者都有<strong>背书节点</strong>的角色。通过<code>peers:</code>键链接到这些<code>Peer</code>节点，其中包含有关如何连接它们的详细信息，包括它们各自的网络地址。</p><p>连接配置文件包含大量信息，不仅仅是<code>Peer</code>节点，而是<strong>网络通道</strong>，<strong>网络排序节点</strong>，<strong>组织</strong>和 <code>CA</code>，因此如果您不了解所有信息，也请不要担心！</p><hr><p>现在让我们将注意力转向<code>connectionOptions</code>对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> connectionOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">identity</span><span class="token operator">:</span> userName<span class="token punctuation">,</span>
    <span class="token literal-property property">wallet</span><span class="token operator">:</span> wallet<span class="token punctuation">,</span>
    <span class="token literal-property property">discovery</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">enabled</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">asLocalhost</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>了解它如何指定应使用<code>identity</code>、<code>userName</code>和<code>wallet</code> 连接到<strong>网关</strong>。</p>`,11),Q={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/connectionoptions.html",target:"_blank",rel:"noopener noreferrer"},Z=s("code",null,"SDK",-1),nn=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> connectionOptions <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">identity</span><span class="token operator">:</span> userName<span class="token punctuation">,</span>
  <span class="token literal-property property">wallet</span><span class="token operator">:</span> wallet<span class="token punctuation">,</span>
  <span class="token literal-property property">eventHandlerOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">commitTimeout</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token literal-property property">strategy</span><span class="token operator">:</span> EventStrategies<span class="token punctuation">.</span><span class="token constant">MSPID_SCOPE_ANYFORTX</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>commitTimeout</code> 告诉<code>SDK</code>等待<strong>100秒</strong>以<strong>监听</strong>是否已提交交易。</p><p><code>strategy:EventStrategies.MSPID_SCOPE_ANYFORTX</code>指定<code>SDK</code>可以在<strong>单个</strong> MagnetoCorp Peer 节点确认交易后通知应用程序，与<code>strategy: EventStrategies.NETWORK_SCOPE_ALLFORTX</code>相反，<code>strategy: EventStrategies.NETWORK_SCOPE_ALLFORTX</code>要求 MagnetoCorp 和 DigiBank 的<strong>所有</strong><code>Peer</code>节点确认交易。</p><h2 id="四、网络通道" tabindex="-1"><a class="header-anchor" href="#四、网络通道" aria-hidden="true">#</a> 四、网络通道</h2><p>在网关<code>connectionProfile.yaml</code>中定义的<code>Peer</code>节点提供给<code>issue.js</code>来访问 PaperNet 。由于这些<code>Peer</code>节点可以连接到多个网络通道，因此网关实际上为应用程序提供了对<strong>多个网络通道的访问</strong>。</p><p>了解应用程序如何选择特定通道：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> network <span class="token operator">=</span> <span class="token keyword">await</span> gateway<span class="token punctuation">.</span><span class="token function">getNetwork</span><span class="token punctuation">(</span><span class="token string">&#39;PaperNet&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从这开始，<code>network</code>将提供对 PaperNet 的访问。</p><p>此外，如果应用程序想要（同时）访问另一个网络，如<code>BondNet</code>，这也很容易：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> network2 <span class="token operator">=</span> <span class="token keyword">await</span> gateway<span class="token punctuation">.</span><span class="token function">getNetwork</span><span class="token punctuation">(</span><span class="token string">&#39;BondNet&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，我们的应用程序可以访问第二个网络 <code>BondNet</code>，同时可以访问<code>PaperNet</code></p><p>我们在这里可以看到 Hyperledger Fabric 的一个强大功能：应用程序可以通过连接到<strong>多个网关</strong><code>Peer</code>节点来加入<strong>网络中的网络</strong>，每个网关<code>Peer</code>节点都连接到<strong>多个网络通道</strong>。根据<code>gateway.connect()</code>提供的钱包标识，应用程序将在不同的通道中拥有不<strong>同的权限</strong>。</p><h2 id="五、构造请求" tabindex="-1"><a class="header-anchor" href="#五、构造请求" aria-hidden="true">#</a> 五、构造请求</h2><p>该应用程序现在准备<strong>发行</strong>商业票据。</p><p>要做到这一点，它将再次使用<code>CommercialPaperContract</code>，它可以非常直接地访问这个智能合约：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> contract <span class="token operator">=</span> <span class="token keyword">await</span> network<span class="token punctuation">.</span><span class="token function">getContract</span><span class="token punctuation">(</span><span class="token string">&#39;papercontract&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;org.papernet.commercialpaper&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意应用程序如何提供名称<code>papercontract</code>以及可选的<strong>合约命名空间</strong><code>org.commercialpaper</code></p>`,17),sn=s("code",null,"papercontract.js",-1),an={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/developapps/contractname.html",target:"_blank",rel:"noopener noreferrer"},en=s("code",null,"papercontract.js",-1),tn=s("code",null,"papercontract",-1),on=s("strong",null,"通道",-1),pn={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/release-2.2/chaincode4noah.html",target:"_blank",rel:"noopener noreferrer"},cn=t(`<p>如果我们的应用程序同时需要访问 PaperNet 或 BondNet 中的另一个合约，这将很容易：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> euroContract <span class="token operator">=</span> <span class="token keyword">await</span> network<span class="token punctuation">.</span><span class="token function">getContract</span><span class="token punctuation">(</span><span class="token string">&#39;EuroCommercialPaperContract&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> bondContract <span class="token operator">=</span> <span class="token keyword">await</span> network2<span class="token punctuation">.</span><span class="token function">getContract</span><span class="token punctuation">(</span><span class="token string">&#39;BondContract&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这些例子中，每个文件我们只有一个智能合约，<code>getContract()</code>将会使用<strong>它找到的第一个合约</strong>。</p><p>回想一下 MagnetoCorp 用于发行其第一份商业票据的交易：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Txn <span class="token operator">=</span> issue
Issuer <span class="token operator">=</span> MagnetoCorp
Paper <span class="token operator">=</span> 00001
Issue <span class="token function">time</span> <span class="token operator">=</span> <span class="token number">31</span> May <span class="token number">2020</span> 09:00:00 EST
Maturity <span class="token function">date</span> <span class="token operator">=</span> <span class="token number">30</span> November <span class="token number">2020</span>
Face value <span class="token operator">=</span> 5M USD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在将此交易提交给 PaperNet！</p><h2 id="六、提交交易" tabindex="-1"><a class="header-anchor" href="#六、提交交易" aria-hidden="true">#</a> 六、提交交易</h2><p>提交一个交易是对<code>SDK</code>的单个方法调用：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> issueResponse <span class="token operator">=</span> <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">submitTransaction</span><span class="token punctuation">(</span><span class="token string">&#39;issue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MagnetoCorp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;00001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2020-05-31&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2020-11-30&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;5000000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>了解<code>submitTransaction()</code>参数如何与交易请求匹配。</p><p>它们的值将传递给智能合约中的<code>issue()</code>方法，并用于创建新的商业票据。回想一下它的签名：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token function">issue</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> issuer<span class="token punctuation">,</span> paperNumber<span class="token punctuation">,</span> issueDateTime<span class="token punctuation">,</span> maturityDateTime<span class="token punctuation">,</span> faceValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那可能会显示一个智能合约会在应用程序触发了<code>submitTransaction()</code>之后很快地收到控制，但是并不是那样的。在外表上，<code>SDK</code>使用了<code>connectionOptions</code>和<code>connectionProfile</code>来将交易提案发送给网络中正确的节点，从那里可以得到所需的<strong>背书</strong>。但是应用程序并不用担心，它仅仅是触发了<code>submitTransaction</code>，然后<code>SDK</code>会处理接下来所有的事情！</p><p>我们注意到，<code>submitTransaction</code>API 包含了<strong>监听交易提交的一个流程</strong>。监听提交是必须的，因为如果没有它的话，你将不会知道你的交易<strong>是否被成功地排序</strong>，验证并且提交到了账本上了。</p><p>现在让我们将注意力转向应用程序如何处理响应！</p><h2 id="七、处理响应" tabindex="-1"><a class="header-anchor" href="#七、处理响应" aria-hidden="true">#</a> 七、处理响应</h2><p>回想一下<code>papercontract.js</code>如何<strong>发行</strong>交易返回一个商业票据响应：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">return</span> paper<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// return paper</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如上所见，新票据需要在返回到应用程序之前<strong>转换为缓冲区（序列化）</strong>。请注意 <code>issue.js</code> 如何使用类方法<code>CommercialPaper.fromBuffer()</code>将响应缓冲区<strong>重新转换为商业票据</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> paper <span class="token operator">=</span> CommercialPaper<span class="token punctuation">.</span><span class="token function">fromBuffer</span><span class="token punctuation">(</span>issueResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样可以在<strong>描述性完成消息</strong>中以自然的方式使用票据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>paper<span class="token punctuation">.</span>issuer<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> commercial paper : </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>paper<span class="token punctuation">.</span>paperNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> successfully issued for value </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>paper<span class="token punctuation">.</span>faceValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>了解如何在应用程序和智能合约中使用相同的<code>paper</code>类。</p><p>如果您像这样构建代码，它将真正有助于可读性和重用。</p>`,24),rn=s("code",null,"SDK",-1),ln=s("strong",null,"策略连接选项",-1),dn={href:"https://hyperledger-fabric.readthedocs.io/zh_CN/txflow.html",target:"_blank",rel:"noopener noreferrer"};function un(kn,gn){const a=p("ExternalLinkIcon");return c(),r("div",null,[i,s("p",null,[n("如果您愿意，可以"),s("a",d,[n("下载示例"),e(a)]),n("，甚至可以"),s("a",u,[n("在本地运行"),e(a)]),n("。它是用 JavaScript 和 Java 编写的，但逻辑与语言无关，因此您可以轻松地查看正在发生的事情！")]),k,s("p",null,[n("您将看到典型应用程序如何使用"),g,n("执行这六个步骤。 您可以在"),v,n("文件中找到应用程序代码。请在浏览器中"),s("a",m,[n("查看"),e(a)]),n("，如果您已下载，请在您喜欢的编辑器中打开它。")]),h,s("p",null,[n("您可以在"),s("a",b,[n("node SDK 文档"),e(a)]),n("中了解"),_,n("类，现在让我们看看如何使用它们将 MagnetoCorp 的应用程序连接到 PaperNet 。该应用程序使用 Fabric "),y,n(" 类，如下所示：")]),f,s("p",null,[n("了解"),w,n("如何在本地文件系统中找到"),s("a",j,[n("钱包"),e(a)]),n("。从钱包中检索到的身份显然适用于使用"),P,n("应用程序的 Isabella 用户。钱包拥有一组身份 —— "),N,n("，可用于访问 PaperNet 或任何其他 Fabric 网络。如果您运行该教程，并查看此目录，您将看到 Isabella 的"),x,n("（"),s("a",C,[n("xxx.id"),e(a)]),n("）。")]),s("p",null,[n("想象一个"),s("a",S,[n("钱包"),e(a)]),n("里面装着政府身份证，驾照或 ATM 卡的"),O,n("。其中的 "),D,n("将持有者与组织相关联，从而使他们有权在网络通道中获得权利。例如， Isabella 可能是 MagnetoCorp 的管理员，这可能比其他用户更有特权，来自 DigiBank 的 Balaji 。 此外，智能合约可以在使用"),s("a",T,[n("交易上下文"),e(a)]),n("的智能合约处理期间检索此身份。")]),B,M,s("p",null,[n("第二个关键类是 Fabric "),z,n(" 。最重要的是，"),s("a",E,[n("网关"),e(a)]),n("用于识别一个或多个提供网络访问的"),F,n("节点，在我们的例子中是 PaperNet 。了解"),K,n("如何连接到其网关：")]),A,s("ul",null,[s("li",null,[I,n("："),s("a",L,[n("连接配置文件"),e(a)]),n("，用于将一组"),R,n("节点标识为 PaperNet 的网关")]),s("li",null,[V,n("："),s("a",W,[n("连接选项"),e(a)]),n("，一组用于控制"),X,n("与 PaperNet 交互的选项")])]),q,J,Y,s("p",null,[n("检查连接"),s("a",$,[n("配置文件"),e(a)]),G,n("，它使用"),s("a",H,[n("YAML"),e(a)]),n("，易于阅读。")]),U,s("p",null,[n("应用程序可以使用其他"),s("a",Q,[n("连接选项"),e(a)]),n("来指示"),Z,n("代表它智能地执行操作。 例如：")]),nn,s("p",null,[n("我们看到如何从包含许多合约的"),sn,n("链码文件中选出一个"),s("a",an,[n("合约名称"),e(a)]),n("。")]),s("p",null,[n("在 PaperNet 中，"),en,n("已安装并使用名称"),tn,n("部署到了"),on,n("，如果您有兴趣，可以查看"),s("a",pn,[n("如何部署包含多个智能合约的链代码"),e(a)]),n("。")]),cn,s("p",null,[n("与交易提案一样，智能合约完成后，应用程序可能会很快收到控制权，但事实并非如此，"),rn,n("负责管理整个共识流程，并根据"),ln,n("在应用程序完成时通知应用程序。 如果您对 SDK 的内容感兴趣，请阅读详细的"),s("a",dn,[n("交易流程"),e(a)]),n("。")])])}const hn=o(l,[["render",un],["__file","6.analysis_paper_2.html.vue"]]);export{hn as default};
