import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as l,e as i}from"./app-5e6e2e94.js";const r={},s=i('<h1 id="以太坊虚拟机-evm" tabindex="-1"><a class="header-anchor" href="#以太坊虚拟机-evm" aria-hidden="true">#</a> 以太坊虚拟机（EVM）</h1><h2 id="一、作用和地位" tabindex="-1"><a class="header-anchor" href="#一、作用和地位" aria-hidden="true">#</a> 一、作用和地位</h2><ul><li>以太坊虚拟机 EVM 是智能合约的<strong>运行环境</strong></li><li>作为<strong>区块验证协议的一部分</strong>，参与网络的每个节点都会运行 EVM 。他们会检查正在验证的块中列出的交易，并运行由 EVM 中的交易触发的代码</li><li>EVM不仅是<strong>沙盒封装</strong>的，而且是完全隔离的，也就是说在 EVM 中运行的代码是无法访问网络、文件系统和其他进程的，甚至智能合约之间的访问也是受限的</li><li>合约以<strong>字节码</strong>的格式（EVM bytecode）存在于区块链上</li><li>合约通常以高级语言（solidity）编写，通过EVM编译器编译为字节码，最终通过客户端上载部署到区块链网络中</li></ul><h2 id="二、evm和账户" tabindex="-1"><a class="header-anchor" href="#二、evm和账户" aria-hidden="true">#</a> 二、EVM和账户</h2><ul><li>以太坊中有两类账户： 外部账户和合约账户，它们<strong>共用</strong> EVM中同一个地址空间</li><li>无论帐户是否存储代码，这两类账户对 EVM 来说处理方式是完全一样的</li><li>每个账户在EVM中都有<strong>一个键值对形式的持久化存储</strong>。其中 key 和 value 的长度都是256位，称之为存储空间</li></ul><h2 id="三、evm和交易" tabindex="-1"><a class="header-anchor" href="#三、evm和交易" aria-hidden="true">#</a> 三、EVM和交易</h2><ul><li>交易可以看作是从一个帐户发到另一个帐户的消息，它可以<strong>包含二进制数据（payload）和以太币</strong></li><li>如果目标账户含有代码，此代码会在EVM中执行，并以<code>payload</code>作为入参，这就是<strong>合约的调用</strong></li><li>如果目标账户是零账户（账户地址为 0 )，此交易就将创建一个<strong>新合约</strong> ，这个用来创建合约的交易的 payload 会被转换为 EVM 字节码并执行，执行的输出作为合约代码永久存储</li></ul><h2 id="四、evm和gas" tabindex="-1"><a class="header-anchor" href="#四、evm和gas" aria-hidden="true">#</a> 四、EVM和gas</h2><ul><li>合约被交易触发调用时，指令会在全网的每个节点上执行：这需要消耗算力成本；每一个指令的执行都有特定的消耗，<strong>gas 就用来量化表示这个成本消耗</strong></li><li>一经创建，每笔交易都按照一定数量的 gas 预付一笔费用，目的是限制执行交易所需要的工作量和为交易支付手续费</li><li>EVM 执行交易时，gas 将按特定规则逐渐耗尽</li><li>gas price 是交易发送者设置的一个值，作为发送者预付手续费的单价。如果交易执行后还有剩余， gas 会原路返还</li><li>无论执行到什么位置，一旦 gas 被耗尽（比如降为负值），将会触发 一个<code>out-of-gas</code>异常。当前调用帧（call frame）所做的<strong>所有状态修改都将被回滚</strong></li></ul><h2 id="五、evm数据存储-storage" tabindex="-1"><a class="header-anchor" href="#五、evm数据存储-storage" aria-hidden="true">#</a> 五、EVM数据存储（Storage）</h2><h3 id="_5-1-storage-存储" tabindex="-1"><a class="header-anchor" href="#_5-1-storage-存储" aria-hidden="true">#</a> 5.1 Storage（存储）</h3><ul><li>每个账户都有一块持久化的存储空间，称为<code>storage</code>，这是一个将256位字映射到256位字的<code>key-value</code>存储区，可以理解为合约的数据库</li><li>永久储存在区块链中，由于会永久保存合约状态变量，所以读写的 gas 开销也最大</li></ul><h3 id="_5-2-memory-内存" tabindex="-1"><a class="header-anchor" href="#_5-2-memory-内存" aria-hidden="true">#</a> 5.2 Memory（内存）</h3><ul><li>每一次消息调用，合约会临时获取一块干净的内存空间</li><li>生命周期仅为整个方法执行期间，函数调用后回收，因为仅保存临时变量，故读写 gas 开销较小</li></ul><h3 id="_5-3-stack-栈" tabindex="-1"><a class="header-anchor" href="#_5-3-stack-栈" aria-hidden="true">#</a> 5.3 Stack（栈）</h3><ul><li>EVM 不是基于寄存器的，而是<strong>基于栈</strong>的，因此所有的计算都在一个被称为栈（stack）的区域执行</li><li>存放部分局部值类型变量，几乎免费使用的内存，但有数量限制</li></ul><h2 id="六、evm指令集" tabindex="-1"><a class="header-anchor" href="#六、evm指令集" aria-hidden="true">#</a> 六、EVM指令集</h2><ul><li>所有的指令都是针对 256位 的字（word）这个<strong>基本数据类型</strong>来进行操作</li><li>具备常用的算术、位、逻辑和比较操作，也可以做到有条件和无条件跳转</li><li>合约可以访问当前区块的相关属性，比如它的块高度和时间戳</li></ul><h2 id="七、消息调用-message-calls" tabindex="-1"><a class="header-anchor" href="#七、消息调用-message-calls" aria-hidden="true">#</a> 七、消息调用（ Message Calls ）</h2><ul><li>合约可以通过消息调用的方式来<strong>调用其它合约或者发送以太币到非合约账户</strong></li><li>合约可以决定在其内部的消息调用中，对于剩余的 gas ，应发送和保留多少</li><li>如果在内部消息调用时发生了<code>out-of-gas</code>异常（或其他任何异常），这将由一个被压入栈顶的错误值所指明；此时只有与该内部消息调用一起发送的 gas 会被消耗掉</li></ul><h2 id="八、委托调用-delegatecall" tabindex="-1"><a class="header-anchor" href="#八、委托调用-delegatecall" aria-hidden="true">#</a> 八、委托调用（Delegatecall）</h2><ul><li>一种<strong>特殊类型的消息调用</strong></li><li>目标地址的代码将在发起调用的合约的上下文中执行，并 且<code>msg.sender</code>和<code>msg.value</code><strong>不变</strong></li><li>可以由此实现“<strong>库</strong>”（library）：可复用的代码库可以放在一个合约的存储上，通过委托调用引入相应代码</li></ul><h2 id="九、合约的创建和自毁" tabindex="-1"><a class="header-anchor" href="#九、合约的创建和自毁" aria-hidden="true">#</a> 九、合约的创建和自毁</h2><ul><li>通过一个特殊的消息调用<code>create calls</code>，合约可以创建其他合约（不是简单的调用零地址）</li><li>合约代码从区块链上移除的唯一方式是合约在合约地址上的执行自毁操作<code>selfdestruct</code>；合约账户上剩余的以太币会发送给指定的目标，然后其存储和代码从状态中被移除</li></ul>',24),o=[s];function t(d,n){return a(),l("div",null,o)}const g=e(r,[["render",t],["__file","5.EVM.html.vue"]]);export{g as default};
